package multichat;

import java.applet.AudioClip;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import javax.swing.*;

public class Cliente extends javax.swing.JFrame {

    private Socket socket;
    private BufferedReader bufferLectura;
    private BufferedWriter bufferEscritura;
    private String nombreUsuario;

    public Cliente(Socket socket, String nombreUsuario) {
        try {
            this.socket = socket;
            this.bufferEscritura = new BufferedWriter((new OutputStreamWriter(socket.getOutputStream())));
            this.bufferLectura = new BufferedReader((new InputStreamReader(socket.getInputStream())));
            this.nombreUsuario = nombreUsuario;
            initComponents();
            this.setLocationRelativeTo(null);
            this.setTitle("Chat de " + nombreUsuario);

            try {
                bufferEscritura.write(nombreUsuario);
                bufferEscritura.newLine();
                bufferEscritura.flush();
            } catch (IOException e) {
                cerrarConexion(socket, bufferLectura, bufferEscritura);
            }
        } catch (IOException e) {
        }
    }

    public void cerrarConexion(Socket socket, BufferedReader bufferLectura, BufferedWriter bufferEscritura) {
        try {
            if (bufferLectura != null) {
                bufferLectura.close();
            }
            if (bufferEscritura != null) {
                bufferEscritura.close();
            }
            if (socket != null) {
                socket.close();
            }
        } catch (IOException e) {
        }
    }

    public void capturaMensajes() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String mensajeDeChat;

                while (socket.isConnected()) {
                    try {
                        mensajeDeChat = bufferLectura.readLine();
                        String buffer[] = mensajeDeChat.split(";");
                        boolean fg = false;

                        if (buffer.length > 1) {
                            fg = comando(buffer[buffer.length - 1], mensajeDeChat);
                        }
                        
                        if(!fg)
                        {
                            AudioClip Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/Mensaje.wav"));
                            Chat.setText(Chat.getText() + "\n" + mensajeDeChat);
                            Sonido.play();
                        }
                    } catch (IOException e) {
                        cerrarConexion(socket, bufferLectura, bufferEscritura);
                    }
                }
            }
        }).start();
    }

    public boolean comando(String comando, String mensaje) {
        AudioClip Sonido;
        String buffer[] = mensaje.split(":");
        boolean fg = false;
        switch (comando) {
            case "beep":
                Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/Beep.wav"));
                Chat.setText(Chat.getText() + "\n\n" + buffer[0] + " ha enviado un zumbido\n");
                Sonido.play();
                fg = true;
                break;
            case "7u7":
                Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/7u7.wav"));
                Chat.setText(Chat.getText() + "\n\n" + buffer[0] + " se ha puesto modo hot\n");
                Sonido.play();
                fg = true;
                break;
            case "lol":
                Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/lol.wav"));
                Chat.setText(Chat.getText() + "\n\n" + buffer[0] + " se ha puesto modo troll\n");
                Sonido.play();
                fg = true;
                break;
            case "Fortnite":
                Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/baile.wav"));
                Chat.setText(Chat.getText() + "\n\n" + buffer[0] + " anda tryhard!!\n");
                Sonido.play();
                fg = true;
                break;
            case "!":
                Sonido = java.applet.Applet.newAudioClip(getClass().getResource("/multichat/alerta.wav"));
                Chat.setText(Chat.getText() + "\n\n" + buffer[0] + " se ha sorprendido!! :0\n");
                Sonido.play();
                fg = true;
                break;
            default:
                break;
        }
        return fg;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Chat = new javax.swing.JTextArea();
        Mensaje = new javax.swing.JTextField();
        Enviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        Chat.setEditable(false);
        Chat.setColumns(20);
        Chat.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        Chat.setRows(5);
        jScrollPane1.setViewportView(Chat);

        Mensaje.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N

        Enviar.setText("Enviar");
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });
        Enviar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EnviarKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Mensaje)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Mensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(Enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("ClientView");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        try {
            if (socket.isConnected()) {
                String mensaje = Mensaje.getText();
                Mensaje.setText("");
                bufferEscritura.write(nombreUsuario + ": " + mensaje);
                bufferEscritura.newLine();
                bufferEscritura.flush();
                Chat.setText(Chat.getText() + "\n" + mensaje);
            }
        } catch (IOException e) {
            cerrarConexion(socket, bufferLectura, bufferEscritura);
        }
    }//GEN-LAST:event_EnviarActionPerformed

    private void EnviarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnviarKeyPressed
        try {
            if (socket.isConnected()) {
                String mensaje = Mensaje.getText();
                Mensaje.setText("");
                bufferEscritura.write(nombreUsuario + ": " + mensaje);
                bufferEscritura.newLine();
                bufferEscritura.flush();
                Chat.setText(Chat.getText() + "\n" + mensaje);
            }
        } catch (IOException e) {
            cerrarConexion(socket, bufferLectura, bufferEscritura);
        }
    }//GEN-LAST:event_EnviarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        String nombreUsuario = JOptionPane.showInputDialog("Escribe tu nombre");
        Socket socket = new Socket("localhost", 1234);

        /* Create and display the form */
        Cliente cliente = new Cliente(socket, nombreUsuario);

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                cliente.setVisible(true);
                cliente.capturaMensajes();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Chat;
    private javax.swing.JButton Enviar;
    private javax.swing.JTextField Mensaje;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
